name: FastAPI CI/CD

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    types:
      - opened
    branches:
      - main
      - dev

env:
  PYTHON_VERSION: 3.12.7
  LINTING_TARGET_VERSION: py312

jobs:
  lint:
    if: ${{ startsWith(github.head_ref, 'feature') && !endsWith(github.head_ref, 'linted') && github.event_name == 'pull_request'}}
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Python environment
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black and auto-correct code
        run: black . --target-version $LINTING_TARGET_VERSION

      - name: Push to lint branch
        id: check_diff
        env:
          BRANCH_NAME: ${{ github.head_ref }}-${{ github.run_id }}-linted
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if [[ $(git status --porcelain) ]]; then
            git checkout -b ${BRANCH_NAME}
            git add ./
            git commit -m "[Linted] Code is Linted"
            git push -u origin ${BRANCH_NAME}
          fi

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    if: ${{ github.event_name == 'push' && github.base_ref == 'main' || github.base_ref == 'dev'}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} |
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

  update-image-tag:
      runs-on: ubuntu-latest
      needs: build_and_push

      steps:
      - name: Checkout this repository
        uses: actions/checkout@v3

      - name: Clone the target repository
        run: |
          git clone https://github.com/Spaces-Place/space-place-helm.git target-repo
          cd target-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update image tag in deployment.yaml
        run: |
          cd target-repo
          # Define variables
          FILE_PATH="members/base/deployment.yaml"
          COMMIT_ID="${{ github.sha }}"
          SHORT_COMMIT_ID=$(echo "$COMMIT_ID" | cut -c1-7)

          # Update the image tag in the file
          sed -i "s|image:.*|image: spaces-place/members:$SHORT_COMMIT_ID|" $FILE_PATH

          # Confirm the change
          echo "Updated $FILE_PATH with image tag $SHORT_COMMIT_ID"
          cat $FILE_PATH

      - name: Commit and push changes to the target repository
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          cd target-repo

          # Commit changes
          git add members/base/deployment.yaml
          git commit -m "Update image tag to $SHORT_COMMIT_ID"

          # Push changes using the PAT
          git push https://x-access-token:${PERSONAL_ACCESS_TOKEN}@github.com/Spaces-Place/space-place-helm.git main