name: FastAPI CI/CD

on:
  push:
    branches:
      - main

env:
  PYTHON_VERSION: 3.12.7
  LINTING_TARGET_VERSION: py312
  CURRENT_BRANCH_NAME: ${{ github.ref_name }}
jobs:
  lint:
    name: Code Linting and Commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Python environment
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run black and auto-correct code
        run: black . --target-version $LINTING_TARGET_VERSION

      - name: Commit and push changes if any
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          if (($(git diff))); then
            git checkout -b "$CURRENT_BRANCH_NAME-linted"
            git add ./
            git commit -m "[Linted] Code is Linted"
            git push
          fi
        continue-on-error: true

  # test:
  #   if: "!contains(github.event.head_commit.message, '[Linted]')"
  #   name: Run Test Code
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4.2.2

  #     - name: Set up Python environment
  #       uses: actions/setup-python@v5.3.0
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest

  #     - name: Run tests
  #       run: pytest
        
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }}
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
